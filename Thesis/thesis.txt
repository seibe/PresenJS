


卒業論文　　2015年度 (平成27年)


right7302500

Meetupにおけるプレゼンテーション記録システムの設計と実装















慶應義塾大学 環境情報学部氏名：髙橋 俊成


卒業論文要旨 - 2015年度 (平成27年度)

center1524000

Meetupにおけるプレゼンテーション記録システムの設計と実装


本研究では、Meetupにおけるプレゼンテーションを記録するために、専用のプレゼンテーション記録システムを設計、構築した。
Meetupとは、共通の趣味やテーマで緩やかに繋がるオンラインコミュニティのメンバーが、知見共有や人間交流を目的として行うカジュアルな勉強会・交流会である。Meetupにおけるプレゼンテーションでは、コミュニティにとって有意義な情報交換が行われている一方で、その記録作業は参加者個々人の自主的・献身的な活動に頼りきっており、成果をオンライン上のコミュニティに十分に還元できていない。
本研究では、プログラマーコミュニティによるMeetupを技術系Meetupと定義し、そこで行われるプレゼンテーションをオンラインで共有しやすい形で記録するための要件を整理した。次にそれを満たす専用のプレゼンテーション記録システムを設計し、WebRTCやElectron等の技術を用いて実装した。終わりに、その評価のために実証実験を実施し、本システムが技術系Meetupにおけるプレゼンテーションの記録に有用であることを確認した。
キーワード：
1. Meetup　2. プレゼンテーション,　3. オンラインコミュニティ,　4. WebRTC,　5. Electron
 

Abstract of Bachelor’s Thesis

65341514922500

Design and implementation of a presentation record systemfor meetup

目次
 TOC \o "1-3" \h \z \u 第1章はじめに PAGEREF _Toc440831509 \h 1
1.1.背景 PAGEREF _Toc440831510 \h 1
1.2.本研究の課題 PAGEREF _Toc440831511 \h 2
1.3.本研究の目的 PAGEREF _Toc440831512 \h 2
1.4.用語定義 PAGEREF _Toc440831513 \h 3
1.5.本論文の構成 PAGEREF _Toc440831514 \h 3
第2章技術系Meetupにおけるプレゼンテーションの分析 PAGEREF _Toc440831515 \h 4
2.1.技術系Meetupの分析 PAGEREF _Toc440831516 \h 4
2.2.技術系Meetupにおけるプレゼンテーションの特徴 PAGEREF _Toc440831517 \h 4
2.2.1.技術系Meetupにおけるプレゼンテーションの登場人物 PAGEREF _Toc440831518 \h 5
2.2.2.技術系Meetupにおけるプレゼンテーションの流れ PAGEREF _Toc440831519 \h 5
2.2.3.技術系Meetupにおけるプレゼンテーション発表 PAGEREF _Toc440831520 \h 6
2.2.4.技術系Meetupにおけるプレゼンテーション視聴 PAGEREF _Toc440831521 \h 7
2.3.技術系Meetupにおけるプレゼンテーションの構成要素 PAGEREF _Toc440831522 \h 8
2.4.本研究のアプローチ PAGEREF _Toc440831523 \h 9
第3章既存スライドフォーマットとその問題点 PAGEREF _Toc440831524 \h 10
3.1.既存のスライドフォーマットと記録可能なデータ PAGEREF _Toc440831525 \h 10
3.2.既存のスライドフォーマットの問題点 PAGEREF _Toc440831526 \h 10
3.2.1.OOXML PAGEREF _Toc440831527 \h 10
3.2.2.MP4 PAGEREF _Toc440831528 \h 11
3.2.3.HTML PAGEREF _Toc440831529 \h 11
第4章技術系Meetupにおけるプレゼンテーション記録システムの設計 PAGEREF _Toc440831530 \h 12
4.1.記録システムの要件定義 PAGEREF _Toc440831532 \h 12
4.2.記録システムの全体設計 PAGEREF _Toc440831533 \h 13
4.2.1.プレゼンテーション記録システムの全体構成 PAGEREF _Toc440831534 \h 13
4.2.2.システム化プレゼンテーションフローの設計 PAGEREF _Toc440831535 \h 13
4.3.発表者用クライアントアプリケーションの設計 PAGEREF _Toc440831536 \h 14
4.3.1.発表者用クライアントアプリケーションの振る舞い PAGEREF _Toc440831537 \h 14
4.3.2.発表者用クライアントアプリケーションの流れと画面 PAGEREF _Toc440831538 \h 17
4.4.聴衆用クライアントアプリケーションの設計 PAGEREF _Toc440831539 \h 21
4.4.1.聴衆用クライアントアプリケーションの振る舞い PAGEREF _Toc440831540 \h 21
4.4.2.聴衆用クライアントアプリケーションの流れと画面 PAGEREF _Toc440831541 \h 23
4.5.サーバーアプリケーションの設計 PAGEREF _Toc440831542 \h 23
4.5.1.サーバーアプリケーションの振る舞い PAGEREF _Toc440831543 \h 24
4.6.プレゼンテーション記録フォーマットの設計 PAGEREF _Toc440831544 \h 25
4.6.1.プレゼンテーション記録フォーマットの属性一覧 PAGEREF _Toc440831545 \h 26
4.6.2.記録データの利用方法 PAGEREF _Toc440831546 \h 29
第5章技術系Meetupにおけるプレゼンテーション記録システムの実装 PAGEREF _Toc440831547 \h 30
5.1.実装環境 PAGEREF _Toc440831549 \h 30
5.2.実装の前提となる技術 PAGEREF _Toc440831550 \h 30
5.2.1.Haxe PAGEREF _Toc440831551 \h 31
5.2.2.WebSocket (RFC5455) PAGEREF _Toc440831552 \h 31
5.2.3.WebRTC PAGEREF _Toc440831553 \h 31
5.2.4.Kurento Media Server PAGEREF _Toc440831554 \h 31
5.2.5.Electron (旧称Atom Shell) PAGEREF _Toc440831555 \h 32
5.2.6.Let's Encrypt PAGEREF _Toc440831556 \h 32
5.3.実装の概要 PAGEREF _Toc440831557 \h 32
5.3.1.発表者用ネイティブクライアントの実装 PAGEREF _Toc440831558 \h 33
5.3.2.聴衆用WEBクライアントの実装 PAGEREF _Toc440831559 \h 34
5.3.3.サーバーの実装 PAGEREF _Toc440831560 \h 34
5.3.4.JSON over WebSocketによるRPCの実装 PAGEREF _Toc440831561 \h 34
第6章評価 PAGEREF _Toc440831562 \h 36
6.1.実証実験の環境 PAGEREF _Toc440831564 \h 36
6.2.プレゼンテーション記録結果 PAGEREF _Toc440831565 \h 37
6.3.考察 PAGEREF _Toc440831566 \h 37
第7章結論 PAGEREF _Toc440831567 \h 38
7.1.まとめ PAGEREF _Toc440831569 \h 38
7.2.今後の課題 PAGEREF _Toc440831570 \h 38
謝辞 PAGEREF _Toc440831571 \h 39
参考文献 PAGEREF _Toc440831572 \h 40

図目次
 TOC \h \z \c "図" 図 1　プログラマーコミュニティにおける情報の流れ PAGEREF _Toc440831573 \h 2
図 2　技術系Meetupのタイムライン PAGEREF _Toc440831574 \h 4
図 3　技術系Meetupにおけるプレゼンテーションの登場人物 PAGEREF _Toc440831575 \h 5
図 4　技術系Meetupにおけるプレゼンテーションの流れ PAGEREF _Toc440831576 \h 6
図 5　Meetupプレゼンテーション記録フォーマットの概念図 PAGEREF _Toc440831577 \h 8
図 6　システム化プレゼンテーションフロー全体図 PAGEREF _Toc440831578 \h 14
図 7　発表者用クライアントアプリケーションの画面遷移 PAGEREF _Toc440831579 \h 17
図 8　発表者用クライアント 認証画面レイアウト1 (初期状態) PAGEREF _Toc440831580 \h 18
図 9　発表者用クライアント 認証画面レイアウト1 (連携後) PAGEREF _Toc440831581 \h 19
図 10　発表者用クライアント 認証画面レイアウト2 PAGEREF _Toc440831582 \h 19
図 11　発表者用クライアント 認証画面レイアウト3 PAGEREF _Toc440831583 \h 20
図 12　発表者クライアント 配信画面レイアウト１ PAGEREF _Toc440831584 \h 21
図 13　聴衆用クライアントアプリケーションの画面遷移 PAGEREF _Toc440831585 \h 23
図 14　プレゼンテーション記録フォーマット(JSON)の例 PAGEREF _Toc440831586 \h 28
図 15　プレゼンテーション記録フォーマット(Markdown)の例 PAGEREF _Toc440831587 \h 29
図 16　Meetupにおけるプレゼンテーション記録システムの実装概要 PAGEREF _Toc440831588 \h 33
図 17　実証実験におけるプレゼンテーションの構図 PAGEREF _Toc440831589 \h 37


表目次
 TOC \h \z \c "表" 表 1　発表者の行動 PAGEREF _Toc440831590 \h 7
表 2　聴衆の行動 PAGEREF _Toc440831591 \h 7
表 3　スライドフォーマットと記録可能コンテンツ PAGEREF _Toc440831592 \h 10
表 4　プレゼンテーションの記録対象とデータ形式 PAGEREF _Toc440831593 \h 12
表 5　発表者用クライアントアプリケーションの機能一覧 PAGEREF _Toc440831594 \h 15
表 6　聴衆用クライアントアプリケーションの機能一覧 PAGEREF _Toc440831595 \h 22
表 7　サーバーアプリケーションの機能一覧 PAGEREF _Toc440831596 \h 24
表 8　プレゼンテーション記録フォーマット(JSON)の属性詳細 PAGEREF _Toc440831597 \h 26
表 9　本研究のプレゼンテーション記録システムの実装環境 PAGEREF _Toc440831598 \h 30
表 10　実装したRPC PAGEREF _Toc440831599 \h 35
表 11　本システムによって記録された要素 PAGEREF _Toc440831600 \h 37



はじめに
背景
オンラインコミュニティは1990年代から始まった情報通信技術の発達のなかで登場し、今日まで発展してきた。古くはメーリングリストやIRCで、現在ではSNSで、共通の趣味や関心で集った人々による活発な非対面・テキスト主体の情報交換が行われてきた。
最近のオンラインコミュニティのメンバーは、より密なコミュニケーションを求めてMeetupと呼ばれるイベントを開催している。Meetupは、普段オンラインで活動する人々がオフラインで行う、知見共有・人間交流を目的とした対面・リアルタイムのカジュアルな勉強会・交流会である。Meetupの形態はコミュニティごとに様々だが、とくにプログラマーコミュニティによる技術系Meetupでは毎回設定されたテーマに沿って参加者のうち数人が発表者としてプレゼンテーションを行うセミナースタイルが主流である。
プログラマーコミュニティのメンバーがわざわざオフラインの技術系Meetupを開催するのは、少人数でIssueトラックをまとめて片付けられたり、熟練プログラマーの知恵を借りて効率的に学習できたりと、同じ時間と場所を共有することに明確なメリットが存在するためである。
Build Insiderが2015年11月に行ったアンケート調査 CITATION Bui15 \l 1041  [1]によって、技術系Meetupに参加する理由はWEB上の資料だけでは得られない良質な知識や最新情報、議論、人脈を得たいからだと考察されている。
技術系Meetupの多くは個人が趣味的に開催するため、企業主催のカンファレンスのように発表や質疑応答に専任の撮影者や速記者が用意されることはまれである。現状、技術系Meetupにおけるプレゼンテーションの記録手法は、聴衆によるボランティア的な文字起こしか、そもそも全く記録していないかのどちらかである。聴衆による文字起こしとは、有志がマイクロブログサービス等にプレゼンテーションの内容やその後の質疑応答を同時進行的にテキストに書き起こし、まるで実況中継のようにマイクロブログサービスへ投稿する手法である。マイクロブログサービスはその性質上、投稿ひとつひとつが独立しており、また時間がたつと投稿内容を参照することが難しくなるCITATION Twi16 \l 1041  [2]ので、さらにマイクロブログまとめサービスを用いて投稿された文字起こしを編纂することもある。


図  SEQ 図 \* ARABIC 1　プログラマーコミュニティにおける情報の流れ
この手法の問題点は、文字起こしの負担が大きい点と、聴衆の自主的・献身的な活動に頼りきっている点、そして記録の品質が保証されない点である。リアルタイムに書き起こして投稿する作業はそこそこのタイピング能力と集中力を求められ、しかもそれは聴衆の自主的・献身的な活動に支えられている。文字起こしができ、かつやりたいという聴衆が名乗り出ない限り記録作業が行われない。また、運よく献身的な聴衆が現れたとしても、その記録フォーマットに統一されたものがないために、個々人の能力や主観によって記録内容が欠けたり、変化したりする恐れがある。
本研究の課題
本研究では、技術系Meetupのプレゼンテーションにおいて専任の記録担当が用意されないために、そこで共有された知見を正確に記録しオンラインコミュニティにきちんと還元できていないという問題点に着目する。
この問題を解決するために、技術系Meetup専用のプレゼンテーション記録システムを構築し、参加者の献身性に頼ることなくプレゼンテーションを記録しオンラインコミュニティに還元できる環境を実現する。
本研究の目的
本研究では、Meetupにおけるプレゼンテーションの記録を目的とする。そのためのアプローチとして、プレゼンテーションのリアルタイムWEB配信機能を備えた専用のプレゼンテーション記録システムを構築する。
このプレゼンテーション記録システムは、Meetupにおけるプレゼンテーションを全てWEB上で配信しながら記録する。これにより、オフラインで行われているMeetupを文字起こし等の変換作業なしに記録できる。記録データは、発表者のスライド資料に参加者の属性情報や活動を付加したテキスト主体の「Meetupプレゼンテーション記録フォーマット」とすることで、WEBで活動するコミュニティが参照しやすくする。
用語定義
本節では、本論文中で用いられる主な用語を定義する。
Meetup（ミートアップ）　オンラインコミュニティのメンバーが、知見・意見共有と人間交流を目的として行うカジュアルな勉強会や交流会。参加者のうち数人が発表者となりプレゼンテーションを行う。発表内容は、後日発表者によって任意にオンライン公開され、オンラインコミュニティに共有されることがある。

オンラインコミュニティ　インターネットを介して活動する実質的なコミュニティの総称。共通の趣味・テーマなどの情報共有・意見交換・人間交流を主な目的に、緩やかに繋がっている。特定の場所や組織に実際に行かなくともネットワークを経由して知的資産を得られる場として機能する。

プレゼンテーション　発表者がスライド資料を用いて聴衆に対して情報を掲示する行為と、それに付随する参加者同士の議論や意見交換。

本論文の構成
2章では技術系Meetupにおけるプレゼンテーションを分析し、問題解決のためのアプローチを提案する。3章で既存のスライドフォーマットとその問題点について分析する。4章で技術系Meetupにおけるプレゼンテーション記録システムを設計し、5章で実装について述べる。6章では本システムを用いた実証実験について述べ、7章でその評価を行う。8章では結論と今後の課題について述べる。

技術系Meetupにおけるプレゼンテーションの分析
本章では、技術系Meetupにおけるプレゼンテーションについて分析し、プレゼンテーションを記録するためのアプローチを述べる。

技術系Meetupの分析
本節では、技術系Meetupの定義し、その特徴を述べる。
本研究では、技術系Meetupを「プログラマーコミュニティによって開催されるカジュアルなソフトウェア技術の勉強会」と定義し、プログラマーコミュニティを「主にソフトウェア開発プロジェクト共有SNSやプログラマー向け知識共有SNSを活用して交流しているプログラマーのオンラインコミュニティ」と定義する。
 REF _Ref439601802 \h 図 1に、プログラマーコミュニティにおける情報の流れを示す。技術系Meetupは、1人以上のコミュニティメンバーが発起人となり、イベント開催支援サイトを介して告知・募集される。興味を持った他のコミュニティメンバーが参加し、同じ日時に同じ場所に集いMeetupが開催される。開催後はMeetup内で使われた発表資料や簡単なレポートがコミュニティ内外に投稿されることがある。
技術系Meetupの流れを REF _Ref440108957 \h 図 2に示す。技術系Meetupでは、発表者の数だけプレゼンテーションを繰り返し、終わりに懇親会が開かれる。プレゼンテーションは知見共有を目的とした発表や質疑応答で、懇親会は人間交流を目的とした食事や飲み会である。懇親会の価値は2者間の関係性にあり、それは極めて属人的であるため、本研究における記録対象には含まない。

図  SEQ 図 \* ARABIC 2　技術系Meetupのタイムライン
技術系Meetupにおけるプレゼンテーションの特徴
本節では技術系Meetupで行われるプレゼンテーションの特徴を述べ、記録システムの設計に必要となる各要素の特徴について考察する。
技術系Meetupにおけるプレゼンテーションの登場人物
本研究では、プレゼンテーションの進行管理を行う者を司会、プレゼンテーションで登壇し発表する者を発表者、それを視聴する者を聴衆と定義する。また、聴衆のSNS投稿を閲覧することで間接的にプレゼンテーションを視聴するオンラインコミュニティのメンバーを遠隔の聴衆と定義する。
技術系Meetupにおけるプレゼンテーションの構成を REF _Ref439776389 \h 図 3に示す。技術系Meetupにおけるプレゼンテーションでは、司会と発表者、聴衆の3種類の参加者が、同じ会場に同じ時間に存在する。また遠隔の聴衆がインターネット越しに同じ時間を共有する。プレゼンテーションはセミナー形式で行われる。司会は発表者や聴衆を兼ねることがあり、また発表者は自身のプレゼンテーション以外では聴衆として振る舞う。
技術系Meetupにおけるプレゼンテーションの流れ
技術系Meetupにおけるプレゼンテーションの流れを REF _Ref439802794 \h 図 4に示す。

図  SEQ 図 \* ARABIC 3　技術系Meetupにおけるプレゼンテーションの登場人物


図  SEQ 図 \* ARABIC 4　技術系Meetupにおけるプレゼンテーションの流れ
技術系Meetupにおけるプレゼンテーション発表
 REF _Ref440116032 \h 表 1に、プレゼンテーション中の発表者の行動を示す。発表者は、ラップトップ型コンピューターをプロジェクター等に繋ぎ、スライド資料等を大画面に映しながら発表する。発表内容によっては途中でデモンストレーションやライブコーディング等の実演をするため、スライド資料のプレゼンテーションモードを中断してデスクトップ映像に切り替えたり、またプレゼンテーションモードを再開したりと、切り替え作業を行うことがある。また発表者が聴衆の嗜好や属性を把握するために、挙手等を呼び掛けてアンケートを行うことがある。発表終了後は質疑応答が行われ、数人の聴衆が質問や感想を口頭またはSNS投稿で述べ、発表者がそれらを拾い口頭で答える。発表に使ったスライド資料は、プレゼンテーション終了後にスライド共有サイトを通じてオンラインコミュニティに共有される。
表  SEQ 表 \* ARABIC 1　発表者の行動
行動
説明
発表
資料を見せながら発話する
スライド操作
スクリーンにスライド資料を映し操作する
ポインタ操作
スライド資料の特定座標を指し示す
実演/デスクトップ操作
スクリーンにデスクトップを映し操作する
質問/アンケート
聴衆に質問をして回答を促す
指名
質疑応答で質問者を指名する
回答/議論
割り込みや質疑応答の質問に対して回答する
なお、技術系Meetupではハンズオンと呼ばれる体験型発表が行われることもある。ハンズオンは発表者の指導のもと聴衆が実習をこなして技術への理解を深める。発表と質疑応答の区別は曖昧で、実習中は発表者と聴衆との間で多くのやり取りがなされる。本研究ではハンズオンはプレゼンテーションとは異なるものとして扱い、記録対象からは外す。
技術系Meetupにおけるプレゼンテーション視聴
 REF _Ref440112486 \h 表 2に、プレゼンテーション中の聴衆の行動を示す。聴衆は、ラップトップ型またはタブレット型コンピューターを操作しながらプレゼンテーションを視聴する。一部の聴衆は発表や質疑応答の内容や感想をリアルタイムにマイクロブログサービスへ投稿し、遠隔の聴衆がそれを閲覧する。プレゼンテーション終了後、マイクロブログサービスの投稿は聴衆によって編纂され、個人ブログやマイクロブログまとめサービスを通じてオンラインコミュニティに共有される。
表  SEQ 表 \* ARABIC 2　聴衆の行動
行動
説明
具体例
非言語反応
発表内容への非言語的な反応
頷く、拍手、笑い声、首を傾げる
割り込み
発表を遮って発言する
「そのグラフの縦軸は何を示していますか？」
聴衆間会話
聴衆同士で会話する
「いまさっき発表者なんて言った？」「さあ」
回答
発表者からの質問に回答する
挙手
実況投稿
発表内容をSNSに投稿する
「仕事効率化に関する発表です #happyo15」
感想投稿
発表への感想をSNSに投稿する
「わかる #happyo15」「下手だなあ #happyo15」
質問投稿
発表への質問をSNSに投稿する
「調査に使った機種は何だろう #happyo15」
検索
発表に関する事柄を検索する
サーチエンジンの利用
質問要求
質問の意思表明をする
挙手
質問/議論
質疑応答で質問する
「結局何を言いたかったのでしょうか？」

聴衆がコンピューターを操作するのは、ハンズオン形式の発表で実習をしたり、発表中に話題に上がった物事をすぐ検索して調べたり、発表の実況や感想をマイクロブログサービス等のSNSに投稿したりするためである。遠隔の聴衆とは、リアルタイムに聴衆のSNS投稿を閲覧することで間接的にプレゼンテーションを視聴しているかのような状況になった者をさす。
技術系Meetupにおけるプレゼンテーションの構成要素
 REF _Ref440108992 \h 図 5は、技術系Meetupにおけるプレゼンテーションの構成要素を表したものである。Meetupにおけるプレゼンテーションでは、まず参加者がいて、次に発表者のスライド資料やそのコントロール情報があり、そして放送者や参加者の表情や身振りなどの視覚情報、発話や拍手などの音声情報がある。これらの基本的な構成要素に加えて、会場内外の聴衆によるSNS投稿も構成要素として挙げられる。
Meetupプレゼンテーション記録フォーマット
既存スライドフォーマット
スライドデータ
(テキスト・映像・音声)
表情・身振り・発話(発表映像・音声)
スライド操作
デスクトップ操作
アンケート結果
参加者属性
SNS投稿
Meetupプレゼンテーション記録フォーマット
既存スライドフォーマット
スライドデータ
(テキスト・映像・音声)
表情・身振り・発話(発表映像・音声)
スライド操作
デスクトップ操作
アンケート結果
参加者属性
SNS投稿


図  SEQ 図 \* ARABIC 5　Meetupプレゼンテーション記録フォーマットの概念図
本研究のアプローチ
技術系Meetupにおけるプレゼンテーションはオフラインの活動であるために、オンラインのプログラマーコミュニティに情報を還元するには内容を記録しコンピューターへ入力する作業が必要となる。
そこで本研究では、Meetupにおけるプレゼンテーションを最初からオンラインで配信することで、普段のオンラインコミュニティの活動同様にプレゼンテーションへの参加がそのままコンピューターへの入力作業となり、ボランティアや専任の担当者なしに機械的にプレゼンテーションを記録できる環境を実現する。スライド資料やSNS投稿等最初からデジタルデータなものはそのまま配信し、発話や身振り等は録画して配信する。

既存スライドフォーマットとその問題点
本章では、スライド資料における既存フォーマットを分析し、それぞれの問題点を整理する。

既存のスライドフォーマットと記録可能なデータ
スライド資料に用いられるフォーマットと表現可能なデータの組み合わせの可否を REF _Ref438407323 \h 表 3に示す。
表  SEQ 表 \* ARABIC 3　スライドフォーマットと記録可能コンテンツ

OOXML
MP4
HTML
テキスト
〇
△
〇
静止画
〇
〇
△
映像/音声
〇
〇
×
〇記録可能　△記録できるが制限がある　×記録できない
既存のスライドフォーマットの問題点
本節では、既存のスライドフォーマットの問題点についてそれぞれ述べる。
OOXML
OOXML (Open Office XML, ISO/IEC 29500:2012)は、Microsoft PowerPointなどのスライドツールで用いられるXMLベースのファイルフォーマット。
テキストや画像、映像などのマルチメディア資料に対応し、表現力も普及度も随一のスライドフォーマットである。しかし標準化されてから日が浅く、また高機能ゆえに非常に複雑で、OOXMLフォーマットを扱えるアプリケーションは少ない。WEBブラウザーもOOXMLを直に扱うことはできないため、スライド共有サイトでは画像やHTMLに自動変換される。
MP4
MP4 (MPEG-4 Part 14, ISO/IEC 14496-14:2003)は、映像や音声、各種メタデータを格納できるメディアコンテナである。
規格としては動画、音声、テキストに対応するが、全てを完璧に再生できるシステム少ない。例えばWEBブラウザーでは、MP4ファイルのうち映像がH.264フォーマットで、音声がAACまたはMP3フォーマットで記録されているものだけが再生できる。メタデータに含まれる字幕等のテキストデータはWEBブラウザーでは解釈されないので、オンラインコミュニティに対してMP4でスライド資料を提供するとき、それは実質的に映像と音声のみとなる（ただし別途WebVTT等のトラックファイルを用意しvideo要素でMP4ファイルと紐づけることで、映像と同期したテキストは実現できる）。映像はビットマップデータのため、作成時の縦横比で常に固定となる。またインタラクティブな要素は含められない。
HTML
HTMLは、WEBで最も普及している文書フォーマットである。構造化されたテキストデータなので内容の検索性が高い。ハイパーリンクやvideoタグを用いればマルチメディアも参照できるが、あくまで参照であり単体での表現力には欠ける。画像はBase64エンコーディングを用いて文字列化することで埋め込める。
HTMLにCSSやJavaScript、そしてリンクされたメディアファイル等を組み合わせて作られたスライド資料はWEBスライド（Web-based slideshow CITATION Web15 \l 1041  [3]）と呼ばれ、機能も実装も統一されていないがWEBブラウザーで閲覧できる点は共通している。レスポンシブに作成することで様々な画面比率に対応でき、またオンラインコミュニティとの相性も良い。しかしファイルがバラバラであるため、Web以外の手段でデータを送りあう場合はzip等でひとつのファイルにまとめるなどの工夫が必要になり面倒である。

技術系Meetupにおけるプレゼンテーション記録システムの設計
本章では、これまでの分析を踏まえた上で、Meetupにおけるプレゼンテーションの記録を実現するために必要なシステムを設計する。

記録システムの要件定義
本節では、技術系Meetupにおけるプレゼンテーション記録システムに必要な要件を整理する。本システムに求められる機能要件を以下に示す。
 REF _Ref439867047 \n \h 2.3で述べた技術系Meetupにおけるプレゼンテーションの構成要素を記録できる
参加者の属性を取得し、一意に識別できる
発表情報（発表概要や発話、資料、その操作）を全ての聴衆に配信できる
聴衆が発表に対してコメントでき、参加者全員がそれを見られる
発表者がアンケートを行い、聴衆が回答でき、参加者全員が結果を見られる
参加者は各自のコンピューターからプレゼンテーションに参加できる
配信情報から自動的にプレゼンテーションの記録を作成できる
作成した記録をプログラマーコミュニティへ容易に共有できる
プログラマーコミュニティにとって扱いやすい形式で出力できる
記録の一部をレポートとしてプログラマーコミュニティに投稿できる
本システムで記録対象とするプレゼンテーション構成要素を REF _Ref439869556 \h 表 4に示す。スライド資料は、スライド共有サイトの利用が一般化していることを鑑みて、データそのものを持たずに外部URLへの参照という形で記録する。
表  SEQ 表 \* ARABIC 4　プレゼンテーションの記録対象とデータ形式
記録対象
データ形式
付随するメタ情報
スライド資料
テキスト(URL)
発表者
参加者属性(SNSアカウント)
テキスト

スライドコントロール(ページめくり、発表時間)
テキスト

カメラ映像
ビデオ
動画コーデック、撮影対象、撮影者
SNS投稿
テキスト(URL)
投稿者、投稿内容、投稿時刻、ページ番号
アンケート
テキスト
質問内容、質問時刻、選択肢ごとの回答者数
記録システムの全体設計
本節では、前節で整理した機能要件を満たす設計について述べる。
プレゼンテーション記録システムの全体構成
プレゼンテーション記録システムは、発表者用のクライアントアプリケーション、聴衆用のクライアントアプリケーション、各クライアントを繋ぐサーバーアプリケーションの3種で構成する。このうち聴衆用クライアントは、オンラインコミュニティが利用しやすいという要件を満たすためにWEBブラウザー上で動作するWEBアプリケーションとする。
システム化プレゼンテーションフローの設計
 REF _Ref439281138 \h 図 6で、本システムを用いたプレゼンテーションの大まかな流れを表す。プレゼンテーションを全てオンライン上で行うというアプローチを実現するために、発表前にシステムに発表情報を登録する「発表準備」を行う。そのため、発表に使うスライド資料は発表前に共有を済ませておく必要がある。「発表」では発表者の操作が全ての聴衆にブロードキャストされ、全ての参加者が常に同じ画面を見ながらコメントや質問を投稿できるようにする。発表を終了すると「質疑応答」に移り、発表中や発表後に投稿された聴衆のコメントを発表者が閲覧しながら回答する。プレゼンテーション中の活動は全て記録される。プレゼンテーション終了後に「ログ保存/アップロード」でプレゼンテーションの記録を保存またはSNS投稿できるようにする。


図  SEQ 図 \* ARABIC 6　システム化プレゼンテーションフロー全体図
発表者用クライアントアプリケーションの設計
本節では、本システムのうち発表者用クライアントアプリケーションの設計について、機能一覧表と画面構成図を示しながら述べる。

発表者用クライアントアプリケーションの振る舞い
本項では、本研究で実装する発表者用クライアントアプリケーションの機能及び動作の概要を述べる。まず、 REF _Ref439008224 \h 表 5で本アプリケーションの機能の一覧を示す。

表  SEQ 表 \* ARABIC 5　発表者用クライアントアプリケーションの機能一覧
No.
大機能
小機能
機能概要
P1
発表者登録
発表者情報取得
保存された発表者の属性情報を取得する
P2

GitHub 認証要求
サーバーからGitHubアカウントの認証用URLを取得し、標準ブラウザーに表示する
P3

GitHub PIN入力
GitHub PINコードの入力を受け付ける
P4

GitHub認証
入力されたGitHub PINコードをサーバーに送り、GitHubアカウント情報を取得する
P5

Google認証要求
サーバーからGoogleアカウントの認証用URLを取得し、標準ブラウザーに表示する
P6

Google PIN入力
Google PINコードの入力を受け付ける
P7

Google認証
入力されたGoogle PINコードをサーバーに送り、Googleアカウント情報とAPIアクセストークンを取得する
P8

Twitter認証要求
サーバーからTwitterアカウントの認証用URLを取得し、標準ブラウザーに表示する
P9

Twitter PIN入力
Twitter PINコードの入力を受け付ける
P10

Twitter認証
入力されたTwitter PINコードをサーバーに送り、Twitterアカウント情報を取得する
P11

認証エラー
認証や情報取得の失敗時にエラーを通知する
P12

発表者情報保存
発表者の属性情報を保存する
P13
発表準備
発表情報入力
発表概要の入力を受け付ける
P14

スライド手動設定
スライド資料をURL手動入力で設定する
P15

Googleスライド一覧表示・設定
発表者のGoogleスライドに登録されているスライド資料の一覧を表示し、指定されたものを資料として設定する
P16

SlideShareスライド一覧表示・設定
任意のSlideShareアカウントに登録されているスライド資料の一覧を表示し、指定されたものを資料として設定する
P17

カメラ検出/設定
発表者PCに接続されたWebカメラの配信有無を設定する
P18

発表情報送信
入力された発表情報をWEBサーバーに送信する
P19
発表告知
視聴用URL取得
Webサーバーから視聴ページのURLを取得する
P20

視聴用URL表示
視聴ページのURLを表示する
P21

視聴用URL投稿
発表者のTwitterアカウントに視聴ページのURLを投稿する
P22
発表操作
スライド操作
スライド資料の表示ページを変更する
P23

ポインタ操作
ポインタでスライド資料の一点を指し示す
P24

デスクトップ配信切り替え
スライド操作とデスクトップ配信を切り替える
P25
発表配信
スライド操作配信
発表者のスライド操作をWEBサーバーに送信する
P26

ポインタ操作配信
発表者のポインタ操作をWEBサーバーに送信する
P27

Webカメラ配信
発表者PCに接続されたWebカメラ映像をメディアサーバーに送信する
P28

デスクトップ配信
発表者PCのデスクトップキャプチャ映像をメディアサーバーに送信する
P29
進行管理
タイマー設定
発表の制限時刻を設定する
P30

タイマー通知
発表の残り時刻または経過時刻を表示する
P31
質疑応答
コメント受信
聴衆からのコメントを受信する
P32

コメント一覧表示
聴衆からの全コメントを新着順に一覧表示する
P33

スタンプ受信
聴衆からのスタンプを受信する
P34

スタンプ表示
聴衆からのスタンプをスライド周辺に表示する
P35

質問通知
聴衆からの質問コメントの総数を通知する
P36

質問一覧表示
聴衆からの質問コメントを時系列順に表示する
P37

コメントリンク表示
コメントへのリンクを関連するスライド資料の特定ページ・特定座標に表示する
P38
アンケート
新規作成
2～3択のアンケートを作成し、選択肢の入力を受け付ける
P39

送信
作成したアンケートをサーバーに送信する
P40

終了通知
アンケートの回答〆切を受け付け、サーバーに送信する
P41

結果表示
アンケートの集計結果をサーバーから受け取り表示する
P42
記録
ログ受信
Webサーバーからログデータを受信する
P43

ログ保存
ログデータを保存する
P44

ログ変換
ログデータをMarkdown形式に変換する
P45

Gist投稿
ログデータ(Markdown)を発表者のGistに投稿する

発表者用クライアントは、Meetupにおけるプレゼンテーションの構成要素のうち発表者が発信する情報を処理し記録用Webサーバーに送信する機能と、Webサーバーから受信した参加者のSNS投稿を表示する機能を持つクライアントアプリケーションである。
発表者があらかじめスライド共有サイトに投稿しておいたスライド資料のURLを本アプリケーションに入力することで、即座にプレゼンテーションの配信と記録が可能になる。プレゼンテーションを開始するとそのプレゼンテーション固有のURLが生成される。ほかの視聴者がこのURLをWebブラウザーで開けば、後述する聴衆用Webアプリケーションですぐにプレゼンテーションへの参加が可能となる。
発表用クライアントの画面にはスライド資料と自身のビデオ映像、そして参加者のSNS投稿が表示され。マウスやキーボードでスライドコントロールが可能である。

発表者用クライアントアプリケーションの流れと画面
 REF _Ref438999975 \h 図 7で、本システムの発表者用クライアントの画面遷移を示す。


図  SEQ 図 \* ARABIC 7　発表者用クライアントアプリケーションの画面遷移

本システムの発表者用クライアントは、認証画面、準備画面、配信画面、配信後画面の4つの画面によって構成される。本論文では、画面を画面レイアウトの単位とする。それぞれの画面は1つ以上のステップで構成され、0個以上のビューを内包する。本論文において、ステップはユーザーインターフェース（入力可能なユーザー操作の組み合わせ）の単位とし、ビューはユーザー操作をきっかけに同一画面にオーバーレイ表示されるコンテンツの単位とする。

認証画面
発表者のユーザー情報を入力する画面で、3つのステップで構成され、3つのビューが含まれる。 REF _Ref439938675 \h 図 8に認証画面のレイアウトを示す。

番号
名称
機能/備考
1
ヘルプ

2
Twitter認証/情報

3
GitHub認証/情報

4
Google認証/情報

5
プライバシーポリシー

6
連携せずに準備画面へ

7
準備画面へ

8
PINコード入力

9
入力キャンセル

10
入力決定





図  SEQ 図 \* ARABIC 8　発表者用クライアント 認証画面レイアウト1 (初期状態)


図  SEQ 図 \* ARABIC 9　発表者用クライアント 認証画面レイアウト1 (連携後)


図  SEQ 図 \* ARABIC 10　発表者用クライアント 認証画面レイアウト2


図  SEQ 図 \* ARABIC 11　発表者用クライアント 認証画面レイアウト3

準備画面
(画面レイアウト)
発表者が配信のための準備をする画面で、3つのビューが含まれる。

配信画面
(画面レイアウト)
発表者が配信を行う画面で、2つのステップで構成され、6つのビューが含まれる。



図  SEQ 図 \* ARABIC 12　発表者クライアント 配信画面レイアウト１

配信後画面
(画面レイアウト)
発表者が配信の記録を保存や共有するための画面で、2つのビューが含まれる。

あああ

聴衆用クライアントアプリケーションの設計
本節では、本システムのうち聴衆用クライアントアプリケーションの設計について述べる。

聴衆用クライアントアプリケーションの振る舞い
本項では、本研究で実装する聴衆用クライアントアプリケーションの機能及び動作の概要を述べる。まず、 REF _Ref439435887 \h 表 6で本アプリケーションの機能の一覧を示す。

表  SEQ 表 \* ARABIC 6　聴衆用クライアントアプリケーションの機能一覧
No.
大機能
小機能
機能概要
A1
認証
聴衆情報取得
聴衆のアカウント情報を取得する
A2

Twitter認証要求
サーバーからTwitterアカウントの認証用URLを取得し、遷移する
A3

Twitter認証
リダイレクトを解析して得たアクセストークンをサーバーに送り、Twitterアカウント情報を取得する
A4

認証エラー
Twitter認証や情報取得に失敗したときにエラーを通知する
A5

発表者情報保存
発表者のセッション情報、Twitterアカウント情報を保存する
A6
入退室
入室
発表URLに紐づいた配信への接続をサーバーに要求する
A7

入室エラー
配信に接続できないときにエラーを通知する
A8

退室
視聴画面を閉じたときにサーバーへ離脱を通知する
A9
視聴
発表情報取得
発表情報を取得する
A10

スライド資料表示
発表に紐づいたスライドデータを表示する
A11

スライド同期
発表者のページ更新通知をサーバーから受け取り同期する
A12

スライド別窓表示
スライドを別窓で、聴衆が任意に操作可能な状態で開く
A13
コメント
コメント表示
サーバーからコメント通知を受け取り同期・表示する
A14

コメント入力/投稿
入力されたコメントを表示中のスライドページまたはその特定座標(矩形)と紐づけてサーバーに送る
A15

スタンプ選択/投稿
選択されたスタンプを表示中のスライドページまたはその特定座標(矩形)と紐づけてサーバーに送る
A16

マイク録音/投稿
聴衆端末のマイク音声を録音し、表示中のスライドページまたはその特定座標(矩形)と紐づけてサーバーに送る
A17

スライド領域選択
スライドの特定座標(矩形)を選択する
A18
ポインタ
ポインタ同期
サーバーからポインタ通知を受け取り同期・表示する
A19
アンケート
アンケート表示
サーバーからアンケート通知を受け取り表示する
A20

アンケート受付
サーバーから〆切通知を受け取るまで、回答を受け付ける
A21

アンケート送信
アンケートの回答をサーバーに送信する
A22

アンケート結果表示
アンケート結果をグラフにして表示する
A23
映像
Webカメラ表示
サーバーから発表者のWebカメラ映像を受信し表示する
A24

デスクトップ表示
サーバーから発表者のデスクトップ映像を受信し表示する
聴衆用アプリケーションは、Meetupにおけるプレゼンテーションの構成要素のうち聴衆のSNS投稿を処理しサーバーに送信する機能と、発表者の発表情報と他の参加者のSNS投稿をサーバーから受け取り表示する機能を持つアプリケーションである。
発表者から伝えられたプレゼンテーションURLをWebブラウザーで開くと、この聴衆側アプリケーションで即座にプレゼンテーションに参加できる。聴衆用アプリケーションの画面にはスライド資料と発表者のビデオ映像、そして参加者のSNS投稿が表示され、マウスやキーボード、タッチインターフェースでSNS投稿やアンケートへの回答が可能である。

聴衆用クライアントアプリケーションの流れと画面
 REF _Ref439369402 \h 図 13で、本システムの聴衆用クライアントの画面遷移を示す。


図  SEQ 図 \* ARABIC 13　聴衆用クライアントアプリケーションの画面遷移
本システムの聴衆用クライアントは、視聴画面のみによって構成される。
視聴画面
(画面レイアウト)
あああ
サーバーアプリケーションの設計
本節では、本システムのうちサーバーアプリケーションの設計について述べる。

サーバーアプリケーションの振る舞い
本項では、本研究で実装するプレゼンテーション記録システムのサーバーアプリケーションの動作概要を述べる。まず、 REF _Ref439631615 \h 表 7で本アプリケーションの機能の一覧を示す。

表  SEQ 表 \* ARABIC 7　サーバーアプリケーションの機能一覧
No.
大機能
小機能
機能概要
S1
発表者認証
GitHub認証開始
発表者クライアントにGitHub認証用URLを渡す
S2

GitHub認証
発表者クライアントからGitHub PINコードを受け取り、生成したアクセストークンでGitHubアカウント情報を取得し返す
S3

Google認証開始
発表者クライアントにGoogle認証用URLを渡す
S4

Google認証
発表者クライアントからGoogle PINコードを受け取り、生成したアクセストークンでGoogleアカウント情報を取得し返す
S5

Twitter認証開始
発表者クライアントにTwitter認証用URLを渡す
S6

Twitter認証
発表者クライアントからTwitter PINコードを受け取り、生成したアクセストークンでTwitterアカウント情報を取得し返す
S7
聴衆認証
Twitter認証開始
聴衆クライアントにTwitter認証用URLを渡す
S8

Twitter認証
聴衆クライアントからアクセストークンを受け取り、Twitterアカウント情報を取得し返す
S9
発表告知
Twitter共有
各クライアントからの要求に応じて、発表タイトル及びURLをTwitterアカウントに投稿する
S10
発表管理
発表生成
発表者クライアントから発表情報を受け取り、一意の発表URLを生成して返す
S11

発表接続
発表URLに応じて、発表者クライアントと聴衆クライアントを接続する
S12

発表終了
発表者クライアントからの終了通知を受け取り、関連する接続の切断と発表URLの無効化を行う
S13
発表配信
基本情報同期
接続した聴衆クライアントに発表情報を送信する
S14

スライド同期
発表者クライアントからのページめくり信号を関連する全聴衆クライアントにブロードキャストする
S15

ポインタ同期
発表者クライアントからのポインタ信号を関連する全聴衆クライアントにブロードキャストする
S16

映像配信
発表者クライアントからのリアルタイム配信映像を、関連する全聴衆クライアントにブロードキャストする
S17

映像切り替え同期
発表者クライアントからの映像切り替え信号を関連する全聴衆クライアントにブロードキャストする
S18
アンケート
アンケート開始
発表者クライアントからのアンケート要求とその内容を関連する全聴衆クライアントにブロードキャストする
S19

アンケート終了
アンケートの締め切り通知を関連する全聴衆クライアントにブロードキャストする
S20

アンケート回収
聴衆クライアントからのアンケート回答を受け取り、集計する
S21

アンケート集計
締め切り時点での集計結果を関連する全てのクライアントにブロードキャストする
S22
コメント
コメント同期
聴衆クライアントからコメントを受け取り、関連する発表者クライアントと他の聴衆クライアントにブロードキャストする
S23

コメント投稿
Twitter認証された聴衆クライアントからコメントを受け取り、聴衆のTwitterタイムラインにコメントを投稿する
S24

音声コメント
聴衆クライアントから録音を受け取り、関連する発表者クライアントと他の聴衆クライアントにブロードキャストする
S25
発表記録
コメント記録
同期した全てのコメントデータを記録する
S26

映像記録
配信した全ての映像データを記録する
S27

スライド記録
スライド資料のURL及び操作情報を記録する
S28

ログ作成
記録されたコメントデータとスライドデータを元にプレゼンテーション記録フォーマットでログを作成し、発表者クライアントに送信する
S29

Gist投稿
発表者クライアントからの要求に応じて、ログからレポートを作成して発表者のGistに投稿する
S30

ログURL通知
発表者クライアントにログ及び映像データをダウンロードできるURLを通知する

サーバーアプリケーションは、本システムにおいてクライアント間の情報の受け渡しとその記録を担う。Meetupにおける全てのプレゼンテーション構成要素を発表者用・聴衆用クライアントから受け取り、サーバー内に記録したうえで参加者全員に同じ情報をブロードキャストして伝える。

プレゼンテーション記録フォーマットの設計
本節では、本システムが記録するプレゼンテーションデータのフォーマット設計について述べる。技術系Meetupにおけるプレゼンテーションの記録データはオンラインコミュニティでの利用が想定されるため、WEBと親和性の高いJSONをコンテナフォーマットとして採用する。

プレゼンテーション記録フォーマットの属性一覧
本項では、JSONをコンテナとする記録フォーマットの設計について述べる。各属性の詳細な構造を REF _Ref439679704 \h 表 8に示す。この記録フォーマットでの記録例を REF _Ref439633793 \h 図 14に示す。記録データには、プレゼンテーションのタイトルや時刻などの基本情報に加え、発表者情報、聴衆のリスト、スライド資料と各ページのURL、スライド資料以外の添付資料のURL、そして時系列順に整理された発表中のアクティビティのリストが含まれる。

表  SEQ 表 \* ARABIC 8　プレゼンテーション記録フォーマット(JSON)の属性詳細
属性名
型
親要素
必須
説明/備考
title
string
-
Y
発表者が指定した発表タイトル
description
string
-
N
発表者が指定した発表の説明文
time_begin
integer
-
Y
プレゼンテーションの開始時刻（ミリ秒単位のUNIX時刻）
time_end
integer
-
Y
プレゼンテーションの終了時刻（ミリ秒単位のUNIX時刻）
presenter
object
-
Y
発表者情報を格納するオブジェクト
name
string
presenter
Y
発表者の氏名またはニックネーム
twitter
string
presenter
N
発表者のTwitterスクリーンネーム
google
string
presenter
N
発表者のGoogle ID
github
string
presenter
N
発表者のGitHub ID
audience
array<object>
-
Y
聴衆情報を格納する配列。indexは聴衆のIDと同義
name
string
audience
N
聴衆の氏名またはニックネーム
twitter
string
audience
N
聴衆のTwitterスクリーンネーム
slide
array<string>
-
Y
スライド資料とそのページごとのURLを格納する配列。indexはページ番号と同義。ページごとに固有のURLが割り振られていないスライド資料の場合は要素が重複する場合がある
attachment
array<object>
-
N
スライド資料以外の添付資料を格納する配列。indexは添付資料のIDと同義
type
string
attachment
Y
添付資料のMIME Type
url
string
attachment
Y
添付資料の参照先URL
name
string
attachment
N
添付資料の名称
activity
array<object>
-
Y
プレゼンテーション内のイベントを時系列順に格納する配列。indexは要素のIDと同義
time
integer
activity
Y
イベントの発生時刻（ミリ秒単位のUNIX時刻）
type
string
activity
Y
イベントの種類。begin, end, comment等がある
page
integer
activity
N
イベントと紐づいたページ(slide配列のindex)
area
object
activity
N
ページの特定座標・領域を示す場合に用いる
x
integer
area
Y
スライド資料の横幅を1.0としたときのX座標
y
integer
area
Y
スライド資料の縦幅を1.0としたときのY座標
width
integer
area
N
スライド資料の横幅を1.0としたときの領域幅
height
integer
area
N
スライド資料の縦幅を1.0としたときの領域高さ
text
string
activity
N
聴衆のコメント
url
string
activity
N
イベントに紐づいたURL
audience_id
integer
activity
N
イベントに紐づいた聴衆のID。0以上
attachment_id
integer
activity
N
イベントに紐づいた添付資料のID。0以上
activity_id
integer
activity

イベントに紐づいた他のイベントのID。0以上
question
object
-
N
アンケート情報
type
string
question
Y
アンケートの形式。singleまたはmultiple
text
string
question
Y
アンケートの質問文
option
array<object>
question
Y
アンケートの選択肢を格納する配列。2要素以上
text
string
option
Y
アンケート選択肢の文章
number
integer
option
Y
アンケート選択肢の選択数。0以上

{
"title": "プレゼンテーションのタイトル",
"description": "このプレゼンテーションはサンプルです。",
"time_begin": 14518146780000,
"time_end": 14518163010000,
"presenter": {
"name": "山田太郎",
"twitter": "@example_yamada",
"google": null,
"github": "exampleyamada"
},
"audience": [{
"name": "竹田花子",
"tiwtter": "@example_hanako "
}, {
"name": "たまちゃん",
"tiwtter": "@example_azarashi"
}],
"slide": [
"http://example.com/slide.html",
"http://example.com/slide.html#2",
"http://example.com/slide.html#3"
] ,
"attachment": [{
"type": "video/webm",
"url": "http://example.com/recerd.webm",
"name": "録画映像"
}],
"activity": [{
"time": 14518148620000,
"type": "slide_update",
"page ": 1
}, {
"time": 14518149240000,
"type": "comment",
"page": 1,
"area": null,
"text": "よろしくー",
"audience_id": 0,
"url": "http://twitter.com/status/9999999999"
}, {
　　　　　　　　　　　　　　　　　　　　　　　　　　　　中略　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
}, {
"time": 14518182720000,
"type": "finish"
}]
}
{
"title": "プレゼンテーションのタイトル",
"description": "このプレゼンテーションはサンプルです。",
"time_begin": 14518146780000,
"time_end": 14518163010000,
"presenter": {
"name": "山田太郎",
"twitter": "@example_yamada",
"google": null,
"github": "exampleyamada"
},
"audience": [{
"name": "竹田花子",
"tiwtter": "@example_hanako "
}, {
"name": "たまちゃん",
"tiwtter": "@example_azarashi"
}],
"slide": [
"http://example.com/slide.html",
"http://example.com/slide.html#2",
"http://example.com/slide.html#3"
] ,
"attachment": [{
"type": "video/webm",
"url": "http://example.com/recerd.webm",
"name": "録画映像"
}],
"activity": [{
"time": 14518148620000,
"type": "slide_update",
"page ": 1
}, {
"time": 14518149240000,
"type": "comment",
"page": 1,
"area": null,
"text": "よろしくー",
"audience_id": 0,
"url": "http://twitter.com/status/9999999999"
}, {
　　　　　　　　　　　　　　　　　　　　　　　　　　　　中略　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
}, {
"time": 14518182720000,
"type": "finish"
}]
}


図  SEQ 図 \* ARABIC 14　プレゼンテーション記録フォーマット(JSON)の例


記録データの利用方法
本項では記録データの利用方法について述べる。この記録フォーマットをMarkdownに変換しての利用例を REF _Ref439634730 \h 図 15で示す。記録データには発表概要と参加者情報、そして参加者のスライドページごとのコメント一覧が含まれる。簡易レポートの形式をとるため情報量よりも読みやすさを重視した形で記述する。参照情報のあるものはハイパーリンクを施す。

# プレゼンテーションのタイトル

## 発表概要
* 発表時刻：2016/01/02 11:32 ～ 11:40
* [スライド資料](http://example.com/slide.html)
* [添付資料1 – 録画映像](http://example.com/recerd.webm)

## 参加者
### 発表者
山田太郎 ([Twitter](https://twitter.com/example_yamada), [GitHub](https://github.com/exampleyamada))
### 聴講者
* [竹田花子](https://twitter.com/example_hanako)
* [たまちゃん](https://twitter.com/example_azarashi)
ほか4名

## コメントログ
* [2ページ目](http://example.com/slide.html#2)
* [よろしくー (竹田花子)](https://twitter.com/exmple_hanako /status/9999999999)
　　　　　　　　　　　　　　　　　　　　　　　　　　　後略　　　　　　　　　　　　　　　　　　　　　　　　　　　
# プレゼンテーションのタイトル

## 発表概要
* 発表時刻：2016/01/02 11:32 ～ 11:40
* [スライド資料](http://example.com/slide.html)
* [添付資料1 – 録画映像](http://example.com/recerd.webm)

## 参加者
### 発表者
山田太郎 ([Twitter](https://twitter.com/example_yamada), [GitHub](https://github.com/exampleyamada))
### 聴講者
* [竹田花子](https://twitter.com/example_hanako)
* [たまちゃん](https://twitter.com/example_azarashi)
ほか4名

## コメントログ
* [2ページ目](http://example.com/slide.html#2)
* [よろしくー (竹田花子)](https://twitter.com/exmple_hanako /status/9999999999)
　　　　　　　　　　　　　　　　　　　　　　　　　　　後略　　　　　　　　　　　　　　　　　　　　　　　　　　　


図  SEQ 図 \* ARABIC 15　プレゼンテーション記録フォーマット(Markdown)の例


技術系Meetupにおけるプレゼンテーション記録システムの実装
本章では、前章で設計したプレゼンテーション記録システムの実装について述べる。

実装環境
本研究で実装したMeetupにおけるプレゼンテーション記録システムの実装環境を REF _Ref438453487 \h 表 9に示す。設計段階ではサーバーは1台であったが、メディアサーバーによる映像配信の処理が重くなりHTTPサーバーやWebSocketサーバーの動作が不安定になることが多々あったため、これらを物理的に分割し2台構成とした。
表  SEQ 表 \* ARABIC 9　本研究のプレゼンテーション記録システムの実装環境
名称
詳細
WEB/WebSocketサーバーOS
Ubuntu 14.04.3 LTS
WEBサーバー
Apache 2.4.7
WebSocketサーバー
Node.js 5.2.0 + ws 0.8.1
サーバーアプリケーション使用言語
Haxe (Node.js)
メディアサーバーOS
Ubuntu 14.04.3 LTS
メディアサーバー
Kurento Media Server 6.2.0
ネイティブクライアントエンジン
Electron 0.35.3
ネイティブクライアント使用言語
Haxe (JavaScript), HTML, CSS
WEBクライアント使用言語
Haxe (JavaScript), HTML, CSS
実装の前提となる技術
Haxe
Haxe CITATION Hax16 \l 1041  [4]は静的型付きのオブジェクト指向プログラミング言語である。Flashコミュニティを出自とする言語のため、ActionScriptと似た構文を持つ。Haxeコンパイラを通してJavaScriptやActionScript、C++、C#、Java、PHP、Pythonコードを出力することが可能なマルチパラダイム言語で、その出力先の多さからマルチプラットフォーム開発を目的として使用されることが多い。本システムではaltJS（JavaScriptおよびNode.jsの代替言語）として利用する。
WebSocket (RFC5455)
WebSocket CITATION Int15 \l 1041  [5]は、WEBアプリケーションのためのTCP上に構築された双方向通信プロトコルである。IETFによってRFC5455として策定・標準化されている。従来のクライアント・サーバー間のリアルタイム通信に用いられていたXMLHttpRequestの欠点を解決する技術として開発されたため、より軽量かつ多機能で、ロングポーリング等を行わずともサーバー側からのプッシュ配信を実現できる。専用のスキームとしてwsおよびwssが割り当てられている。なお、WebSocket APICITATION W3C15 \l 1041  [6]はW3Cによって策定されている。本システムでは、アプリケーション間のリアルタイム通信と、WebRTCのシグナリングのためにWebSocketを用いる。
WebRTC
WebRTC CITATION Goo16 \l 1041  [7]は、W3Cが提唱するWebブラウザー用のリアルタイムコミュニケーションAPIで、特別なプラグインなしでサーバーレスのピアツーピアの映像伝送を可能とする（ただし最初の接続時は伝送経路を決めるためにWebSocket等を用いてシグナリングを行う必要がある）。映像や音声のリアルタイム伝送のためのメディアチャンネルと、欠落のないバイナリデータ伝送のためのデータチャンネルの2種類の通信方式がある。メディアチャンネルはDTLSの助けを借りたSRTP over UDPプロトコルを用いて映像や音声を暗号化したうえでリアルタイム伝送する。データチャンネルはSCTP over DTLS over UDPプロトコルを用いてバイナリデータを暗号化したうえで伝送する。本システムでは、発表者映像のリアルタイム配信と記録のためにWebRTCを用いる。
Kurento Media Server
Kurento Media ServerCITATION Kur15 \l 1041  [8]はWebRTCを用いたグループコミュニケーションのためのメディアサーバーである。Kurento Technologiesによりオープンソースで開発されている。Kurentoを用いることで、ピアツーピア特有のフルメッシュで複雑な構造を回避し、サーバーに繋ぐだけで全てのクライアントと通信ができるようになる。本システムでは発表者クライアントと無数の聴衆クライアントを効率的につなぐためのWebRTC SFU (Selective Forwarding Unit)として用いる。
Electron (旧称Atom Shell)
Electron CITATION Git16 \l 1041  [9]は、GitHub社が開発するデスクトップアプリのためのクロスプラットフォーム実行環境である。Chromiumブラウザーを内蔵し、Node.js/HTMLで記述したアプリケーションをWindows、Max OS X、Linux上で動かせる。本システムでは発表者用クライアントにおいてWEBアプリケーションのクロスドメイン制約を回避するために用いる。
Let's Encrypt
Let's Encrypt CITATION Int16 \l 1041  [10]は、非営利団体Internet Security Research Groupが運営する無料ドメイン認証TLSサーバー証明書プロジェクト、並びにその発行サービスである。本システムでは、Chromium系ブラウザーにおいてgetUserMediaメソッドがHTTPS環境でしか動作しない仕様に対応するために用いる。
実装の概要
本節では、本研究で実装したプレゼンテーション記録システムの実装の概要を述べる。
実装の概要を REF _Ref438455114 \h 図 16に示す。本システムの実装は、発表者が使用するネイティブクライアントと、聴衆が使用するWebクライアント、それらから発信される情報を受け取り記録・他の参加者に仲介するWebサーバー・Kurentoメディアサーバー、ならびに各アプリケーションが協調して動作するための通信プロトコルに大別される。


図  SEQ 図 \* ARABIC 16　Meetupにおけるプレゼンテーション記録システムの実装概要
発表者用ネイティブクライアントの実装
発表者用クライアントアプリケーションは、プログラマーコミュニティができる限り利用しやすいようWEBアプリケーションとしたかったが、iframeタグなどのクロスドメイン制限でスライドのページ送り等をシステムで検知することが難しかったため、Electronを用いてネイティブクライアントとして実装した。Electronは、WEBアプリケーションをデスクトップアプリケーションとしてパッケージングできるアプリケーションフレームワークである。Electronにはiframeのクロスドメイン制限を無効としたwebviewという独自のタグがあり、今回はこれを用いてWEB上にあるスライド資料の表示と操作を実現した。このネイティブクライアントは別途構築したインストーラーでWindows、Mac OSXにインストールできる。
 REF _Ref439008224 \h 表 5に挙げた機能のうち、実証実験に必要な最低限の機能（P13、P14、P17、P18、P19、P22、P25、P27、P30、P31、P32、P33、P34、P35、P36）を実装した。
聴衆用WEBクライアントの実装
聴衆用クライアントアプリケーションは、プログラマーコミュニティが利用しやすいようWEBアプリケーションとした。HTMLやCSSのコードは発表者用クライアントとできる限り共通化することで、見た目の差異を小さくし、また実装コストも減らした。利用を想定するブラウザーは、Chrome M48以降、ならびにFirefox 43以降とした。
 REF _Ref439435887 \h 表 6に挙げた機能のうち、実証実験に必要な最低限の機能（A1、A6、A7、A8、A9、A10、A11、A13、A14、A15、A23）を実装した。
サーバーの実装
サーバーアプリケーションは、WEB/WebSocketサーバーと、メディアサーバーに分けられる。両者ともにUbuntu OS上で動作するよう実装したが、処理負荷の都合から前者と後者は別のサーバーコンピューター上で稼働させた。WEBサーバーはApacheで、WebSocketサーバーはNode.js/wsで、メディアサーバーはKurento Media Serverを用いて構築した。
メディアサーバーは、全てのクライアントと接続し、発表者用ネイティブクライアントから配信された映像を記録しながら各聴衆用WEBクライアントに中継する役割を担う。WebRTCは本来P2P通信なので発表者と聴衆を直接接続すればメディアサーバーは不要であるが、映像を記録したり、発表者用ネイティブクライアントにかかる負荷を減らしたりする必要があったために、今回WebRTC SFU CITATION 岩瀬義15 \l 1041  [11]としてKurento Media Serverを導入した。SFUとは選択的配信ユニット
 REF _Ref439631615 \h 表 7に挙げた機能のうち、実証実験に必要な最低限の機能（S10、S11、S12、S13、S14、S16、S22、S23、S25、S26、S27、S28）を実装した。
JSON over WebSocketによるRPCの実装
各アプリケーションが協調して動作するためのRPC（遠隔手続き呼び出し）を実装した。 REF _Ref440808998 \h 表 10に遠隔手続きの一覧を示す。このRPCはWebSocket 上でJSONフォーマットを用いてやり取りされる。
表  SEQ 表 \* ARABIC 10　実装したRPC
呼び出し名
方向
備考
ICE_CANDIDATE
Server <--> Client
WebRTC経路情報の交換
COMMENT
Server <--> Client
コメントの投稿
UPDATE_SLIDE
Server <--> Client
スライドページの更新
ON_ACCEPT_STREAM
Server -> Client
メディアサーバーへの接続完了
ON_UPDATE_AUDIENCE
Server -> Client
参加人数の更新
ON_ERROR
Server -> Client
プレゼンテーションの異常終了
ON_FINISH
Server -> Client
プレゼンテーションの正常終了
WILL_STOP_STREAM
Server -> Client
映像配信の終了予告
ON_STOP_STREAM
Server -> Client
映像配信の終了
ON_ACCEPT_PRESENTER
Server -> Client(Native)
発表者の接続承認
ON_CREATE_LOG
Server -> Client(Native)
ログの生成完了
ON_ACCEPT_AUDIENCE
Server -> Client(WEB)
聴衆の接続承認
CAN_CONNECT_STREAM
Server -> Client(WEB)
映像配信の存在
JOIN_PRESENTER
Client(Native) -> Server
発表者の接続要求
LEAVE_PRESENTER
Client(Native) -> Server
発表者の切断要求
START_STREAM
Client(Native) -> Server
映像配信の開始要求
STOP_STREAM
Client(Native) -> Server
映像配信の終了要求
REQUEST_LOG
Client(Native) -> Server
ログの生成要求
JOIN_VIEWER
Client(WEB) -> Server
聴衆の接続要求
LEAVE_VIEWER
Client(WEB) -> Server
聴衆の切断要求
CONNECT_STREAM
Client(WEB) -> Server
映像配信への接続要求
DISCONNECT_STREAM
Client(WEB) -> Server
映像配信からの切断要求


評価
本章では、実装したシステムを用いて行った実証実験について述べる。
映像配信時の参加者のスケーラビリティ　WebRTCを用いて映像記録・配信を行った際に安定して動作する同時参加者数の上限値。

対応するスライド共有サイトの数　プレゼンテーションを行う際に、スライド資料参照先として利用可能なスライド共有サイトの数。


実証実験の環境
村井純研究室Archグループの有志で行っている「モダンオペレーティングシステム輪講会」において、本システムを用いたプレゼンテーション記録の実証実験を行った。村井純研究室Archグループは、通常GitHubやSlack等のSNSを用いて交流し、週に1度のオフラインミーティング並びに輪講会においてより密な情報共有を行っているという意味において、プログラマーコミュニティと技術系Meetupと同様の構図であることから、今回の実証実験の舞台に相応しいと判断した。
発表の構図を REF _Ref440799738 \h 図 17に示す。2016年1月14日(木)に行われたモダンオペレーティングシステム輪講会は、村井純研究室学部生部屋を会場に、1人の発表者が書籍「モダンオペレーティング 第2版」の一部内容を、スライド資料を用いて紹介・解説した。発表者はあらかじめスライド資料をGoogleスライドで共有し、本システムの発表者用クライアントを用いて発表した。また発表者のコンピューターは外部ディスプレイに接続し、発表画面をメイン会場全体から見えるようにした。聴衆は、各自のコンピューターから本システムの聴衆用クライアントを用いて発表に参加した。聴衆のうち1人は、遠隔環境を再現するために別室に隔離した。


図  SEQ 図 \* ARABIC 17　実証実験におけるプレゼンテーションの構図
プレゼンテーション記録結果
プレゼンテーション内で行われた言動と、そのうち記録できたものを REF _Ref440826195 \h 表 11に示す。
表  SEQ 表 \* ARABIC 11　本システムによって記録された要素
記録対象
詳細
数
発表タイトル
タイトル
1
発表開始
時刻
1
発表終了
時刻
1
発表者属性
名前、IPアドレス
1
聴衆属性
名前、IPアドレス、入室順序
22
発表スライド
ページ数、ページ順序、ページごとのURL
44
発表者映像
MIMEタイプ、保存先URL
1
入退室
時刻、聴衆番号
29
コメント
時刻、コメント種別、テキスト、ページ番号、聴衆番号
59
ページ送り
時刻、ページ番号
84

考察
本節では、実証実験の結果を評価し、考察する。

結論
本章では、結論として本研究の成果を明らかにするとともに、今後の課題について述べる。

まとめ
本研究では、技術系Meetupにおけるプレゼンテーションの記録を目的とした。その問題解決のために、技術系Meetupにおけるプレゼンテーション記録システムを設計し、実装した。
技術系Meetupにおけるプレゼンテーションは、オンラインのプログラマーコミュニティにとって唯一のオフラインイベントである。こうした環境を踏まえ、本研究ではプレゼンテーションの構成要素を配信しながら記録するWEBシステムを実装して、実証実験を行った。実証実験では、研究室で行われた輪講会において記録の実証実験を行った。
実証実験の結果より、本研究で構築したプレゼンテーション記録システムでプレゼンテーションが正確に記録されることを確認し、本研究のアプローチが有効であることが確認された。
今後の課題
実証実験の結果から、本研究のアプローチは技術系Meetupにおけるプレゼンテーションの記録に有効であることが明らかになった。しかし実証実験で構築した環境には幾つかの問題が見受けられた。以下に今後の課題を述べる。
スライド資料が外部参照であるため、単体では完全な記録とならない
コミュニティに顔出ししたくない発表者を考慮できていない

謝辞

参考文献
BIBLIOGRAPHY
[1] 
Build Insider, “なぜ勉強会・カンファレンスに参加するのか？ 良かった勉強会・残念だった勉強会 - Build Insider,” 21 12 2015. [オンライン]. Available: http://www.buildinsider.net/hub/survey/201511-engineerreal. [アクセス日: 5 1 2016].
[2] 
Twitter, Inc., “ツイートが消えてしまった場合 | Twitterヘルプセンター,” 28 9 2015. [オンライン]. Available: https://support.twitter.com/articles/277716. [アクセス日: 5 1 2016].
[3] 
“Web-based slideshow - Wikipedia, the free encyclopedia,” 25 7 2015. [オンライン]. Available: https://en.wikipedia.org/wiki/Web-based_slideshow. [アクセス日: 5 1 2016].
[4] 
Haxe Foundation, “Haxe - The Cross-platform Toolkit,” 17 1 2016. [オンライン]. Available: http://haxe.org/. [アクセス日: 17 1 2016].
[5] 
Internet Engineering Task Force, “RFC 6455 - The WebSocket Protocol,” 9 12 2015. [オンライン]. Available: https://tools.ietf.org/html/rfc6455. [アクセス日: 17 1 2016].
[6] 
W3C, “The WebSocket API,” 24 10 2015. [オンライン]. Available: https://www.w3.org/TR/websockets/. [アクセス日: 17 1 2016].
[7] 
Google Chrome team, “WebRTC Home | WebRTC,” 14 1 2016. [オンライン]. Available: https://webrtc.org/. [アクセス日: 17 1 2016].
[8] 
Technologies, Kurento, “Kurento,” 6 10 2015. [オンライン]. Available: http://www.kurento.org/. [アクセス日: 17 1 2016].
[9] 
GitHub, Inc., “Electron,” 16 1 2016. [オンライン]. Available: http://electron.atom.io/. [アクセス日: 17 1 2016].
[10] 
Internet Security Research Group, “Let's Encrypt - Free SSL/TLS Certificates,” 13 1 2016. [オンライン]. Available: https://letsencrypt.org/. [アクセス日: 17 1 2016].
[11] 
岩. 義昌, “WebRTCにおけるサーバーソリューションの決め手とは？─WebRTC Conference Japan基調講演 | HTML5Experts.jp,” 9 2 2015. [オンライン]. Available: https://html5experts.jp/iwase/12585/. [アクセス日: 17 1 2016].
[12] 
“Meetupとは,” 19 12 2015. [オンライン]. Available: http://help.meetup.com/customer/ja/portal/articles/637187-meetup%E3%81%A8%E3%81%AF.
[13] 
高木義和, “情報文化　VIII. インターネットコミュニティの特性,” 28 5 2015. [オンライン]. Available: http://www.nuis.ac.jp/~takagi/JB/2015/ic08.pdf. [アクセス日: 20 12 2015].
[14] 
T. NGO, “OFFICE OPEN XML OVERVIEW,” 23 10 2006. [オンライン]. Available: http://www.ecma-international.org/news/TC45_current_work/OpenXML%20White%20Paper.pdf. [アクセス日: 21 12 2015].
[15] 
総務省, “デジタルアーカイブの構築・連携のためのガイドライン,” 26 3 2012. [オンライン]. Available: http://www.soumu.go.jp/main_content/000153595.pdf. [アクセス日: 20 12 2015].
[16] 
市川裕康, “『ソーシャル&リアルがポイント。今求められる新しい出会い、学び、コミュニティの形～「ミートアップ」とは』　 | ソーシャルビジネス最前線 | 現代ビジネス [講談社],” 2 5 2011. [オンライン]. Available: http://gendai.ismedia.jp/articles/-/3422. [アクセス日: 21 12 2015].
[17] 
一. 三井, 誠. 内田 , 晋. 白山, “SNSにおける情報伝播に対するコミュニティの影響,” 横断型基幹科学技術研究団体連合, 2005.
[18] 
H. Rheingold, The Virtual Community: Homesteading on the Electronic Frontier, Cambridge, Massachusetts: The MIT Press, 2000. 



